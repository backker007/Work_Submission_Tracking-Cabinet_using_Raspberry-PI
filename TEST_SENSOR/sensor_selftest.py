# TEST_SENSOR/sensor_selftest_safe.py
# -*- coding: utf-8 -*-
import argparse, time, statistics, sys
import board, busio, digitalio
import adafruit_vl53l0x

ADDRESS_BASE      = 0x30           # ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 0x30,0x31,0x32,0x33 ‡∏ï‡∏≤‡∏° index
TIMING_BUDGET_US  = 20_000         # 20 ms
BOOT_DELAY_S      = 0.35           # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏Å XSHUT ‡πÉ‡∏´‡πâ‡∏ö‡∏π‡∏ï‡∏à‡∏£‡∏¥‡∏á
I2C_LOCK_TIMEOUT  = 3.0            # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î I2C)
USE_CONTINUOUS    = True

def gpio_to_boardD(n: int):
    return getattr(board, f"D{n}")

def open_i2c_or_die(timeout=I2C_LOCK_TIMEOUT):
    print("‚û°Ô∏è  ‡πÄ‡∏õ‡∏¥‡∏î I¬≤C...", flush=True)
    i2c = busio.I2C(board.SCL, board.SDA)
    t0 = time.time()
    while True:
        try:
            if i2c.try_lock():
                addrs = i2c.scan()
                i2c.unlock()
                print(f"‚úÖ I¬≤C ready, ‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: {[hex(a) for a in addrs]}", flush=True)
                return i2c
        except Exception:
            pass
        if time.time() - t0 > timeout:
            print("‚ùå I¬≤C busy/‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏™‡∏Ñ‡πâ‡∏≤‡∏á SCL LOW)")
            print("   -> ‡∏´‡∏¢‡∏∏‡∏î service/‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            sys.exit(2)
        time.sleep(0.05)

def build_xshut(pins):
    xs = [digitalio.DigitalInOut(gpio_to_boardD(p)) for p in pins]
    for x in xs:
        x.switch_to_output(value=False)  # LOW = ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    print("üîå ‡∏ï‡∏±‡πâ‡∏á XSHUT = LOW ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß", flush=True)
    time.sleep(0.2)
    return xs

def probe_default(i2c):
    try:
        return adafruit_vl53l0x.VL53L0X(i2c)  # ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà 0x29
    except Exception:
        return None

def probe_addr(i2c, addr):
    try:
        return adafruit_vl53l0x.VL53L0X(i2c, address=addr)
    except Exception:
        return None

def attach_or_assign(i2c, idx):
    target = ADDRESS_BASE + idx
    print(f"   ‚è≥ idx{idx}: ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏π‡∏ï {BOOT_DELAY_S:.2f}s...", flush=True)
    time.sleep(BOOT_DELAY_S)

    # 1) ‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà default 0x29 ‡∏Å‡πà‡∏≠‡∏ô
    s = probe_default(i2c)
    if s:
        print(f"   üü¢ idx{idx}: ‡∏û‡∏ö‡∏ó‡∏µ‡πà 0x29 ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 0x{target:02X}", flush=True)
        try:
            s.measurement_timing_budget = TIMING_BUDGET_US
        except Exception:
            pass
        s.set_address(target)
        if USE_CONTINUOUS:
            try: s.start_continuous()
            except Exception: pass
        return s, target

    # 2) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 0x29 ‡∏≠‡∏≤‡∏à‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
    s2 = probe_addr(i2c, target)
    if s2:
        print(f"   ‚ÑπÔ∏è  idx{idx}: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ @0x{target:02X}", flush=True)
        try:
            s2.measurement_timing_budget = TIMING_BUDGET_US
        except Exception:
            pass
        if USE_CONTINUOUS:
            try: s2.start_continuous()
            except Exception: pass
        return s2, target

    print(f"   ‚ùå idx{idx}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á 0x29 ‡πÅ‡∏•‡∏∞ 0x{target:02X}", flush=True)
    return None, None

def reset_all_to_default(xs):
    print("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï XSHUT: LOW ‚Üí HIGH (‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0x29 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", flush=True)
    for x in xs: x.value = False
    time.sleep(0.3)
    for x in xs: x.value = True
    time.sleep(0.4)
    print("‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à", flush=True)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--pins", default="17,27,22",
        help="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XSHUT (‡πÄ‡∏ä‡πà‡∏ô 17,27,22 ‡∏´‡∏£‡∏∑‡∏≠ 17,27,22,5)")
    ap.add_argument("--samples", type=int, default=8,
        help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå")
    ap.add_argument("--keep-address", action="store_true",
        help="‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï address ‡∏ï‡∏≠‡∏ô‡∏à‡∏ö (‡∏Ñ‡∏á 0x30..33)")
    args = ap.parse_args()

    pins = [int(s.strip()) for s in args.pins.split(",") if s.strip()]
    print(f"üîß XSHUT GPIO pins: {pins}", flush=True)

    i2c = open_i2c_or_die()

    xs = build_xshut(pins)
    sensors = []
    addrs = []

    try:
        print("üöÄ ‡∏õ‡∏•‡∏∏‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß + ‡∏ï‡∏±‡πâ‡∏á address", flush=True)
        for idx, x in enumerate(xs):
            print(f"‚Üí idx{idx}: XSHUT HIGH", flush=True)
            x.value = True
            s, addr = attach_or_assign(i2c, idx)
            sensors.append(s); addrs.append(addr)

        found = [(i, a) for i, a in enumerate(addrs) if a is not None]
        if not found:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≤‡∏¢ VCC/GND/SDA/SCL/XSHUT ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î service ‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô)")
        else:
            print("üìã ‡∏û‡∏ö:", ", ".join([f"idx{i}@0x{a:02X}" for i, a in found]))

        print("üìè ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤", flush=True)
        for i, s in enumerate(sensors):
            if not s:
                print(f"‚Äî idx{i}: (no sensor)")
                continue
            vals = []
            for _ in range(args.samples):
                try:
                    vals.append(int(s.range))
                except Exception:
                    vals.append(-1)
                time.sleep(0.05)
            good = [v for v in vals if 0 < v < 2000]
            med = statistics.median(good) if good else None
            print(f"   idx{i}@0x{addrs[i]:02X} ‚Üí samples={vals}  median={med}")

    finally:
        if not args.keep_address:
            reset_all_to_default(xs)
        else:
            print("‚õ≥ keep-address: ‡∏Ñ‡∏á 0x30..0x33 ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")

if __name__ == "__main__":
    main()
