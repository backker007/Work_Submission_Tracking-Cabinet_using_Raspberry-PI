# TEST_SENSOR/addr_assign_light.py
# ‡∏ï‡∏±‡πâ‡∏á address VL53L0X ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤‡πÜ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï‡∏Ç‡∏≠‡∏á adafruit_vl53l0x
# ‡πÉ‡∏ä‡πâ XSHUT ‡∏õ‡∏•‡∏∏‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß -> ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô 0x29 -> ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏à‡∏¥‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå 0x8A ‡πÄ‡∏õ‡πá‡∏ô 0x30+idx
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö --keep ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á address ‡πÑ‡∏ß‡πâ / ‡πÑ‡∏°‡πà keep ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï XSHUT LOW->HIGH ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
import time, argparse, board, busio, digitalio
from adafruit_bus_device.i2c_device import I2CDevice

ADDRESS_BASE = 0x30     # 0x30..0x33
BOOT_TIMEOUT = 1.2      # ‡∏£‡∏≠‡πÉ‡∏´‡πâ 0x29 ‡∏õ‡∏£‡∏≤‡∏Å‡∏è (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
DEFAULT_PINS = [17, 27, 22, 5]  # XSHUT GPIO (‡πÄ‡∏û‡∏¥‡πà‡∏° 5 ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πà)

def D(n): return getattr(board, f"D{n}")

def scan_has(i2c, addr):
    try:
        i2c.try_lock()
        addrs = set(i2c.scan())
    finally:
        try: i2c.unlock()
        except Exception: pass
    return addr in addrs

def write_u8(i2c, addr, reg, val):
    dev = I2CDevice(i2c, addr)
    with dev:
        dev.write(bytes([reg, val & 0x7F]))

def build_xshut(pins):
    xs = [digitalio.DigitalInOut(D(p)) for p in pins]
    for x in xs:
        x.switch_to_output(value=False)  # LOW = ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    time.sleep(0.2)
    return xs

def reset_all(xs):
    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö 0x29 ‡∏î‡πâ‡∏ß‡∏¢ XSHUT LOW->HIGH
    for x in xs: x.value = False
    time.sleep(0.3)
    for x in xs: x.value = True
    time.sleep(0.5)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--pins", default=",".join(map(str, DEFAULT_PINS)),
                    help="‡πÄ‡∏ä‡πà‡∏ô 17,27,22 ‡∏´‡∏£‡∏∑‡∏≠ 17,27,22,5")
    ap.add_argument("--keep", action="store_true", help="‡∏Ñ‡∏á address 0x30.. ‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏à‡∏ö")
    args = ap.parse_args()
    pins = [int(s) for s in args.pins.split(",") if s.strip()]

    print(f"üîß XSHUT pins: {pins}")
    i2c = busio.I2C(board.SCL, board.SDA)

    xs = build_xshut(pins)
    assigned = []

    try:
        for idx, x in enumerate(xs):
            target = ADDRESS_BASE + idx   # 0x30..0x33
            print(f"\n‚Üí idx{idx}: XSHUT HIGH, target 0x{target:02X}")
            x.value = True
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ 0x29 ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
            t0 = time.time()
            while time.time() - t0 < BOOT_TIMEOUT:
                if scan_has(i2c, 0x29):
                    break
                time.sleep(0.05)
            if not scan_has(i2c, 0x29):
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà target ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                if scan_has(i2c, target):
                    print(f"‚ÑπÔ∏è  idx{idx}: ‡∏û‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß @0x{target:02X}")
                    assigned.append(target)
                    continue
                print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô 0x29 (‡∏ï‡∏£‡∏ß‡∏à XSHUT/VCC/SDA/SCL ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ)")
                assigned.append(None)
                continue

            # ‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏à‡∏¥‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå 0x8A (I2C_SLAVE_DEVICE_ADDRESS)
            try:
                write_u8(i2c, 0x29, 0x8A, target)
                time.sleep(0.02)
                ok = scan_has(i2c, target)
                print(("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if ok else "‚ö†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô"),
                      f"0x{target:02X}")
                assigned.append(target if ok else None)
            except Exception as e:
                print(f"‚ùå set 0x29‚Üí0x{target:02X} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                assigned.append(None)

        print("\nüìã ‡∏™‡∏£‡∏∏‡∏õ:", [f"0x{a:02X}" if a else None for a in assigned])

    finally:
        if args.keep:
            print("‚õ≥ keep: ‡∏Ñ‡∏á address ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ")
        else:
            print("üîÑ reset: ‡∏Ñ‡∏∑‡∏ô XSHUT LOW‚ÜíHIGH (‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 0x29)")
            reset_all(xs)
            print("‚úÖ done")

if __name__ == "__main__":
    main()
