# TEST_SENSOR/sensor_selftest.py
# -*- coding: utf-8 -*-
"""
VL53L0X self-test:
- ‡∏Ñ‡∏∏‡∏° XSHUT ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß -> ‡∏à‡∏±‡∏ö‡∏ó‡∏µ‡πà 0x29 -> set_address() ‡πÄ‡∏õ‡πá‡∏ô 0x30/0x31/0x32/0x33
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà address ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô 0x30..33) ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
- ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ range ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß (samples ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå (default) ‡∏à‡∏∞ "‡∏•‡πâ‡∏≤‡∏á address" ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á XSHUT ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß LOW -> HIGH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö 0x29

‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á:
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ GPIO ‡∏Ç‡∏≠‡∏á XSHUT ‡∏î‡πâ‡∏ß‡∏¢ --pins (‡πÄ‡∏ä‡πà‡∏ô --pins 17,27,22 ‡∏´‡∏£‡∏∑‡∏≠ 17,27,22,5)
- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ --samples
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á address ‡∏ï‡∏≠‡∏ô‡∏à‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà --keep-address
"""

import argparse
import time
import statistics
import board
import busio
import digitalio
import adafruit_vl53l0x

DEFAULT_PINS = [17, 27, 22]          # XSHUT ‡πÉ‡∏ä‡πâ GPIO17/27/22 (‡∏û‡∏¥‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ)
ADDRESS_BASE = 0x30                   # ‡∏à‡∏∞‡πÑ‡∏î‡πâ 0x30,0x31,0x32,0x33 ...
TIMING_BUDGET_US = 20_000             # 20ms ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
BOOT_DELAY_S = 0.30                   # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏•‡∏∏‡∏Å XSHUT
USE_CONTINUOUS_MODE = True

def d(gpio_num: int):
    """map int -> board.Dxx"""
    return getattr(board, f"D{gpio_num}")

def build_xshut(pins_nums):
    xs = [digitalio.DigitalInOut(d(n)) for n in pins_nums]
    for x in xs:
        x.switch_to_output(value=False)  # ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô (LOW = shutdown)
    time.sleep(0.2)
    return xs

def probe_29(i2c):
    """‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö 0x29 (default). ‡∏Ñ‡∏∑‡∏ô obj ‡∏´‡∏£‡∏∑‡∏≠ None"""
    try:
        return adafruit_vl53l0x.VL53L0X(i2c)  # default addr = 0x29
    except Exception:
        return None

def probe_addr(i2c, addr):
    """‡∏•‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö addr ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    try:
        return adafruit_vl53l0x.VL53L0X(i2c, address=addr)
    except Exception:
        return None

def assign_or_attach(i2c, idx, leave_on=True):
    """
    ‡∏õ‡∏•‡∏∏‡∏Å XSHUT ‡∏Ç‡∏≠‡∏á index ‡∏ô‡∏µ‡πâ -> ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏±‡∏ö 0x29 ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô ADDRESS_BASE+idx
    ‡∏ñ‡πâ‡∏≤ 0x29 ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö ‡∏•‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà ADDRESS_BASE+idx (‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß)
    ‡∏Ñ‡∏∑‡∏ô (sensor_obj, address_int) ‡∏´‡∏£‡∏∑‡∏≠ (None, None)
    """
    addr_target = ADDRESS_BASE + idx
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏π‡∏ï
    time.sleep(BOOT_DELAY_S)

    # 1) ‡∏Å‡∏£‡∏ì‡∏µ default 0x29
    s = probe_29(i2c)
    if s:
        try:
            s.measurement_timing_budget = TIMING_BUDGET_US
        except Exception:
            pass
        try:
            s.set_address(addr_target)
            print(f"‚úÖ idx{idx}: 0x29 -> 0x{addr_target:02X}")
            if USE_CONTINUOUS_MODE:
                try: s.start_continuous()
                except Exception: pass
            return s, addr_target
        except Exception as e:
            print(f"‚ö†Ô∏è idx{idx}: ‡∏û‡∏ö 0x29 ‡πÅ‡∏ï‡πà set_address ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

    # 2) ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á address ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏π‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
    s2 = probe_addr(i2c, addr_target)
    if s2:
        try:
            s2.measurement_timing_budget = TIMING_BUDGET_US
        except Exception:
            pass
        if USE_CONTINUOUS_MODE:
            try: s2.start_continuous()
            except Exception: pass
        print(f"‚ÑπÔ∏è idx{idx}: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß @0x{addr_target:02X}")
        return s2, addr_target

    # ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á 0x29 ‡πÅ‡∏•‡∏∞ 0x{base+idx}
    print(f"‚ùå idx{idx}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà 0x29 ‡∏´‡∏£‡∏∑‡∏≠ 0x{addr_target:02X}")
    return None, None

def restore_all_default(xs):
    """‡∏•‡πâ‡∏≤‡∏á address: ‡∏î‡∏∂‡∏á XSHUT ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß LOW -> HIGH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö 0x29"""
    for x in xs: x.value = False
    time.sleep(0.25)
    for x in xs: x.value = True
    time.sleep(0.35)
    # ‡πÑ‡∏°‡πà set_address ‡πÉ‡∏î ‡πÜ ‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 0x29 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    print("üîÑ restore: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï XSHUT LOW->HIGH ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 0x29)")

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--pins", type=str, default=",".join(map(str, DEFAULT_PINS)),
                    help="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XSHUT ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma (‡πÄ‡∏ä‡πà‡∏ô 17,27,22 ‡∏´‡∏£‡∏∑‡∏≠ 17,27,22,5)")
    ap.add_argument("--samples", type=int, default=10, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå")
    ap.add_argument("--keep-address", action="store_true",
                    help="‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á address ‡∏ï‡∏≠‡∏ô‡∏à‡∏ö (‡∏Ñ‡∏á 0x30..0x33 ‡πÑ‡∏ß‡πâ)")
    args = ap.parse_args()

    pins_nums = [int(s.strip()) for s in args.pins.split(",") if s.strip()]
    print(f"üîß XSHUT GPIO pins: {pins_nums}")
    i2c = busio.I2C(board.SCL, board.SDA)

    xs = build_xshut(pins_nums)

    sensors = []
    addrs = []

    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß + assign ‡∏´‡∏£‡∏∑‡∏≠ attach
        for idx, x in enumerate(xs):
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ (‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ "‡∏Ñ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á address ‡πÄ‡∏î‡∏¥‡∏°)
            x.value = True
            s, addr = assign_or_attach(i2c, idx)
            sensors.append(s)
            addrs.append(addr)

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡∏û‡∏ö
        found = [(i, f"0x{a:02X}") for i, a in enumerate(addrs) if a is not None]
        if not found:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢")
        else:
            print("üìã ‡∏û‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå:", ", ".join([f"idx{i}@{a}" for i, a in found]))

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤
        for i, s in enumerate(sensors):
            if not s:
                print(f"‚Äî idx{i}: (no sensor)")
                continue
            vals = []
            for _ in range(args.samples):
                try:
                    vals.append(int(s.range))
                except Exception:
                    vals.append(-1)
                time.sleep(0.05)
            good = [v for v in vals if 0 < v < 2000]
            med = statistics.median(good) if good else None
            print(f"idx{i}@0x{addrs[i]:02X}: samples={vals}  median={med}")
    finally:
        if not args.keep-address:
            restore_all_default(xs)
        else:
            print("‚è≥ keep-address: ‡∏Ñ‡∏á 0x30..0x33 ‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")

if __name__ == "__main__":
    main()
