#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LED Debug Script - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LED ‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á
‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LED ‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
"""

import time
import board
import busio
from adafruit_mcp230xx.mcp23017 import MCP23017
from digitalio import Direction

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MCP23017
i2c = busio.I2C(board.SCL, board.SDA)
mcp = MCP23017(i2c)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏¥‡∏ô LED (‡∏ï‡∏≤‡∏° .env ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
LED_READY_PINS = [0, 2, 4, 6]  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
LED_ERROR_PINS = [1, 3, 5, 7]  # ‡πÅ‡∏î‡∏á
ACTIVE_HIGH = True  # True=‡∏™‡πà‡∏á HIGH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î, False=‡∏™‡πà‡∏á LOW ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î

def setup_led(pin_num):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô OUTPUT"""
    pin = mcp.get_pin(pin_num)
    pin.direction = Direction.OUTPUT
    return pin

def led_on(pin):
    """‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü"""
    pin.value = True if ACTIVE_HIGH else False

def led_off(pin):
    """‡∏õ‡∏¥‡∏î‡πÑ‡∏ü"""
    pin.value = False if ACTIVE_HIGH else True

def test_all_leds():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö LED ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á"""
    print("=" * 60)
    print("LED Debug Test - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö LED ‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á")
    print("=" * 60)
    
    # Setup ‡∏ó‡∏∏‡∏Å‡∏û‡∏¥‡∏ô
    ready_pins = [setup_led(p) for p in LED_READY_PINS]
    error_pins = [setup_led(p) for p in LED_ERROR_PINS]
    
    # ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏î‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô
    print("\n1Ô∏è‚É£ ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
    for pin in ready_pins + error_pins:
        led_off(pin)
    time.sleep(1)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (Ready)
    print("\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (Ready) ‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á...")
    for i, pin in enumerate(ready_pins, start=1):
        print(f"   ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ä‡πà‡∏≠‡∏á {i} (pin {LED_READY_PINS[i-1]})...")
        led_on(pin)
        time.sleep(1.5)
        led_off(pin)
        time.sleep(0.5)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÅ‡∏î‡∏á (Error)
    print("\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡πÅ‡∏î‡∏á (Error) ‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á...")
    for i, pin in enumerate(error_pins, start=1):
        print(f"   ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á {i} (pin {LED_ERROR_PINS[i-1]})...")
        led_on(pin)
        time.sleep(1.5)
        led_off(pin)
        time.sleep(0.5)
    
    # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    print("\n4Ô∏è‚É£ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    for pin in ready_pins:
        led_on(pin)
    time.sleep(2)
    for pin in ready_pins:
        led_off(pin)
    
    print("\n5Ô∏è‚É£ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    for pin in error_pins:
        led_on(pin)
    time.sleep(2)
    for pin in error_pins:
        led_off(pin)
    
    # ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏™‡∏•‡∏±‡∏ö
    print("\n6Ô∏è‚É£ ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡πÅ‡∏î‡∏á 5 ‡∏£‡∏≠‡∏ö...")
    for _ in range(5):
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        for pin in ready_pins:
            led_on(pin)
        time.sleep(0.3)
        for pin in ready_pins:
            led_off(pin)
        
        # ‡πÅ‡∏î‡∏á
        for pin in error_pins:
            led_on(pin)
        time.sleep(0.3)
        for pin in error_pins:
            led_off(pin)
    
    print("\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("=" * 60)
    print("‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ‚Üí LED ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
    print("‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î/‡∏ï‡∏¥‡∏î‡∏ú‡∏¥‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
    print("  1. ‡∏™‡∏≤‡∏¢ LED ‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏û‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    print("  2. SLOT_LED_ACTIVE_HIGH ‡πÉ‡∏ô .env ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    print("  3. LED ‡∏°‡∏µ resistor ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 220-330Œ©)")
    print("  4. ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á LED (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 3.3V)")
    print("=" * 60)

def test_specific_pin(pin_num, duration=2):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
    print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏ô {pin_num} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    pin = setup_led(pin_num)
    led_on(pin)
    time.sleep(duration)
    led_off(pin)
    print(f"‚úÖ ‡∏õ‡∏¥‡∏î‡∏û‡∏¥‡∏ô {pin_num} ‡πÅ‡∏•‡πâ‡∏ß")

def interactive_test():
    """‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö interactive"""
    print("\n" + "=" * 60)
    print("LED Interactive Test")
    print("=" * 60)
    
    ready_pins = [setup_led(p) for p in LED_READY_PINS]
    error_pins = [setup_led(p) for p in LED_ERROR_PINS]
    all_pins = ready_pins + error_pins
    all_pin_nums = LED_READY_PINS + LED_ERROR_PINS
    
    # ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    for pin in all_pins:
        led_off(pin)
    
    print("\n‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
    print("  r1-r4 : ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ä‡πà‡∏≠‡∏á 1-4")
    print("  e1-e4 : ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á 1-4")
    print("  off   : ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("  on    : ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("  quit  : ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    print()
    
    while True:
        cmd = input("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á > ").strip().lower()
        
        if cmd == "quit":
            for pin in all_pins:
                led_off(pin)
            print("‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°.")
            break
        
        elif cmd == "off":
            for pin in all_pins:
                led_off(pin)
            print("‚úÖ ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        elif cmd == "on":
            for pin in all_pins:
                led_on(pin)
            print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        elif cmd.startswith("r") and len(cmd) == 2 and cmd[1].isdigit():
            idx = int(cmd[1]) - 1
            if 0 <= idx < len(ready_pins):
                led_on(ready_pins[idx])
                print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ä‡πà‡∏≠‡∏á {idx + 1} (pin {LED_READY_PINS[idx]})")
            else:
                print("‚ùå ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        elif cmd.startswith("e") and len(cmd) == 2 and cmd[1].isdigit():
            idx = int(cmd[1]) - 1
            if 0 <= idx < len(error_pins):
                led_on(error_pins[idx])
                print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÅ‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á {idx + 1} (pin {LED_ERROR_PINS[idx]})")
            else:
                print("‚ùå ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        else:
            print("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

if __name__ == "__main__":
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           Smart Locker LED Debug Tool                      ‚ïë
‚ïë                                                            ‚ïë
‚ïë  ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö LED ‡∏ö‡∏ô MCP23017                            ‚ïë
‚ïë  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LED ‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    print("\n‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
    print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Interactive")
    print("3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
    
    try:
        choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1/2/3): ").strip()
        
        if choice == "1":
            test_all_leds()
        elif choice == "2":
            interactive_test()
        elif choice == "3":
            pin = int(input("‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏¥‡∏ô (0-15): "))
            if 0 <= pin <= 15:
                test_specific_pin(pin)
            else:
                print("‚ùå ‡∏û‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 0-15)")
        else:
            print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()