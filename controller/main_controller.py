# ‚úÖ controller/main_controller.py
# SmartLocker Controller ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Multi-Node + ‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á + ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö helpers

import sys
import os
import time
import json
import threading
import queue
from pathlib import Path

# ---- Project root to sys.path ----
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# ---- Load .env ----
from dotenv import load_dotenv
ROOT = Path(__file__).resolve().parents[1]
load_dotenv(ROOT / ".env")

# (debug) ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å MQTT ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
print(
    "[MQTT cfg]",
    os.getenv("MQTT_HOST"),
    os.getenv("MQTT_PORT"),
    "TLS=" + str(os.getenv("MQTT_TLS")),
    "USER=" + str(os.getenv("MQTT_USERNAME")),
)

# ---- Imports from shared modules ----
from shared.mqtt_helpers import (
    publish_status,
    publish_warning,
    get_command_subscriptions,
)
from shared.hardware_helpers import (
    init_mcp,
    init_xshuts,
    reset_vl53_addresses,
    init_sensors,
    read_sensor,
    move_servo_180,
    is_door_reliably_closed,
    vl53_sensors,
    mcp_pins,
    relay_pins,
    CHANGE_THRESHOLD,  # threshold ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞ (mm)
)
from shared.role_helpers import can_insert, can_unlock, is_valid_role

# ==== CONFIG ====
NODE_ID = os.getenv("NODE_ID", "C01")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "120"))
ZERO_THRESHOLD = int(os.getenv("ZERO_THRESHOLD", "70"))  # >70mm ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)

# ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ä‡πà‡∏≠‡∏á (0..3)
slot_status = [{"capacity_mm": 0, "available": True, "door_closed": True} for _ in range(4)]

# ‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô busy[4] ‡πÑ‡∏î‡πâ)
reading_active = False

# role ‡πÅ‡∏•‡∏∞ index ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (debug/‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)
selected_sensor_index = None
user_role = None

# ‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å MQTT ‚Üí worker
cmd_q = queue.Queue()


# ==== MAIN LOOP ====
def main():
    # Init hardware
    init_mcp()
    init_xshuts()
    reset_vl53_addresses()
    init_sensors()

    # Initial status broadcast
    for i in range(len(slot_status)):
        slot_status[i] = {"capacity_mm": 240 + i, "available": True, "door_closed": True}
        publish_status_slot(i)
        time.sleep(0.1)

    # Start MQTT
    client = _build_mqtt_client()
    client.loop_start()

    # Start command worker (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô thread, ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏á!)
    threading.Thread(target=command_worker, daemon=True).start()

    last_check = time.time()

    try:
        while True:
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏ü/LED ‡∏ó‡∏∏‡∏Å ‡πÜ CHECK_INTERVAL
            if time.time() - last_check >= CHECK_INTERVAL:
                for i in range(len(vl53_sensors)):
                    value = read_sensor(i)

                    # NOTE: ‡∏ï‡∏£‡∏ß‡∏à mapping ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å
                    green = mcp_pins[i]        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ LED ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                    red = mcp_pins[8 + i]      # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ LED ‡πÅ‡∏î‡∏á
                    # ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏∏‡πà‡∏á input ‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏õ‡∏£‡∏∞‡∏ï‡∏π

                    if value == -1:           # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ/‡∏ä‡∏¥‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                        green.value = False
                        red.value = True
                    elif value == 0:          # (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                        green.value = True
                        red.value = False
                    else:
                        green.value = False
                        red.value = True

                last_check = time.time()

            time.sleep(0.1)
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    finally:
        try:
            client.loop_stop()
            client.disconnect()
        except Exception:
            pass


# ==== MQTT STATUS WRAPPER ====
def publish_status_slot(index: int):
    """‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á index (0-based) ‡∏≠‡∏≠‡∏Å MQTT"""
    publish_status(NODE_ID, index + 1, slot_status[index])


def publish_warning_slot(index: int, message: str = None):
    """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á index (0-based) ‡∏≠‡∏≠‡∏Å MQTT"""
    publish_warning(
        NODE_ID,
        index + 1,
        message or "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    )


# ==== STORAGE COMPARTMENT STATE MACHINE (‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£) ====
def Storage_compartment(index: int):
    """
    ‡πÄ‡∏õ‡∏¥‡∏î servo ‚Üí ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á' ‚Üí ‡πÄ‡∏ù‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏à‡∏ô‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‚Üí ‡∏õ‡∏¥‡∏î servo ‚Üí ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    (logic ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    """
    global reading_active

    STATE_WAIT_INSERT = "wait_insert"
    STATE_MONITOR_MOVEMENT = "monitor_movement"
    STATE_CLOSE_SERVO = "close_servo"
    STATE_DONE = "done"

    try:
        move_servo_180(index, 180)
        print(f"üîÑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á {index + 1} (‚Üí 180¬∞)")

        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏°‡∏µ timeout)
        initial = -1
        timeout = time.time() + 5
        while initial <= 0 and time.time() < timeout:
            initial = read_sensor(index)
            time.sleep(0.2)

        state = STATE_WAIT_INSERT if initial > 0 else STATE_CLOSE_SERVO
        if initial <= 0:
            print("‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå")

        while state != STATE_DONE:
            if state == STATE_WAIT_INSERT:
                timeout = time.time() + 10
                while time.time() < timeout:
                    current = read_sensor(index)
                    print(f"‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á... S{index + 1}: {current:.1f} mm")
                    if current > 0 and current < initial - CHANGE_THRESHOLD:
                        print("üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")
                        state = STATE_MONITOR_MOVEMENT
                        break
                    time.sleep(0.2)
                else:
                    print("‚è± ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡∏≠‡∏á ‚Üí ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå")
                    state = STATE_CLOSE_SERVO

            elif state == STATE_MONITOR_MOVEMENT:
                last_motion_time = time.time()
                last_distance = read_sensor(index)
                print("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß...")

                while True:
                    current = read_sensor(index)
                    print(f"üö± S{index + 1}: {current:.1f} mm")
                    if abs(current - last_distance) >= CHANGE_THRESHOLD:
                        print("üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤")
                        last_motion_time = time.time()
                        last_distance = current
                    if time.time() - last_motion_time >= 3:
                        print("‚è≥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏ô‡∏≤‡∏ô 3 ‡∏ß‡∏¥ ‚Üí ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå")
                        break
                    time.sleep(0.2)

                state = STATE_CLOSE_SERVO

            elif state == STATE_CLOSE_SERVO:
                print(f"üîí ‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á {index + 1} (‚Üê 0¬∞)")
                move_servo_180(index, 0)
                capacity = read_sensor(index)
                sensor_exists = index < len(vl53_sensors)
                is_available = capacity > ZERO_THRESHOLD and sensor_exists
                slot_status[index].update(
                    {
                        "capacity_mm": capacity,
                        "available": is_available,
                        "door_closed": True,
                    }
                )
                publish_status_slot(index)
                state = STATE_DONE

        print(f"‚úÖ ‡∏ä‡πà‡∏≠‡∏á {index + 1}: ‡∏õ‡∏¥‡∏î servo ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"[ERR] Storage_compartment({index}): {e}")
    finally:
        reading_active = False


# ==== DOOR UNLOCK SEQUENCE (‡πÄ‡∏≠‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å) ====
def handle_door_unlock(index: int):
    """
    ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å (relay ON) ‚Üí ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π ‚Üí ‡πÄ‡∏ù‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å + ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î
    ‚Üí ‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó (debounce) ‚Üí ‡∏•‡πá‡∏≠‡∏Å (relay OFF) ‚Üí ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    """
    global reading_active

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤/threshold ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    TIME_WAIT_OPEN_DOOR = 10
    MOTION_TIMEOUT = 30
    MOTION_INACTIVE_BEFORE_WARN = 5
    TIME_REPEAT_WARNING = 10
    SENSOR_STABLE_DURATION = 1.5
    SENSOR_MOTION_THRESHOLD = CHANGE_THRESHOLD
    SENSOR_CHECK_INTERVAL = 0.2

    try:
        # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å (‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏ü‡πÉ‡∏´‡πâ‡πÇ‡∏ã‡∏•‡∏¥‡∏ô‡∏≠‡∏¢‡∏î‡πå)
        relay_pins[index].value = True
        print(f"üîì ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ä‡πà‡∏≠‡∏á {index + 1} (Relay ON)")

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ "‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏à‡∏£‡∏¥‡∏á" ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10 ‡∏ß‡∏¥
        wait_start = time.time()
        while time.time() - wait_start <= TIME_WAIT_OPEN_DOOR:
            if not is_door_reliably_closed(index):
                print("‚úÖ ‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                break
            print("‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π...")
            time.sleep(SENSOR_CHECK_INTERVAL)
        else:
            print("‚ö†Ô∏è ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π ‚Üí ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
            relay_pins[index].value = False
            publish_warning_slot(
                index,
                "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
            )
            return

        # ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å + ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥ ‡∏´‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î
        extract_start = time.time()
        last_warning_time = 0
        last_motion_time = time.time()
        last_distance = read_sensor(index)
        motion_detected = False

        print("üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å...")
        while True:
            # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏Å‡πá‡πÑ‡∏õ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏•‡∏¢
            if is_door_reliably_closed(index):
                print("üö™ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏Å‡πà‡∏≠‡∏ô timeout ‚Üí ‡πÑ‡∏õ‡∏•‡πá‡∏≠‡∏Å")
                break

            current = read_sensor(index)
            print(f"üìâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current:.1f} mm")

            if abs(current - last_distance) >= SENSOR_MOTION_THRESHOLD:
                print("üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤")
                last_motion_time = time.time()
                last_distance = current
                motion_detected = True

            # ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å
            if time.time() - extract_start > MOTION_TIMEOUT:
                if not motion_detected:
                    print("‚ö†Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏•‡∏¢ ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
                    publish_warning_slot(index, "‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏¢")
                print("‚è≥ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π")
                break

            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î ‚Üí ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥
            if time.time() - last_motion_time > MOTION_INACTIVE_BEFORE_WARN:
                if not is_door_reliably_closed(index) and time.time() - last_warning_time > TIME_REPEAT_WARNING:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥")
                    publish_warning_slot(index, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏¥‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å")
                    last_warning_time = time.time()

            time.sleep(SENSOR_CHECK_INTERVAL)

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ "‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó‡∏Ñ‡∏á‡∏ó‡∏µ‡πà" ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏•‡πá‡∏≠‡∏Å
        print(f"‚è≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó ‡∏£‡∏≠ {SENSOR_STABLE_DURATION:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        while not is_door_reliably_closed(index):
            # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î
            if time.time() - last_warning_time > TIME_REPEAT_WARNING:
                publish_warning_slot(index, "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏¥‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å")
                last_warning_time = time.time()
            time.sleep(SENSOR_CHECK_INTERVAL)
        time.sleep(SENSOR_STABLE_DURATION)

        # ‡∏™‡∏±‡πà‡∏á "‡∏•‡πá‡∏≠‡∏Å" (‡∏ï‡∏±‡∏î‡πÑ‡∏ü‡πÇ‡∏ã‡∏•‡∏¥‡∏ô‡∏≠‡∏¢‡∏î‡πå)
        relay_pins[index].value = False
        print(f"üîê ‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ä‡πà‡∏≠‡∏á {index + 1} (Relay OFF)")

        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏à‡∏£‡∏¥‡∏á
        time.sleep(0.5)
        if not is_door_reliably_closed(index):
            print("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
            publish_warning_slot(index, "‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏™‡∏ô‡∏¥‡∏ó")
            return

        # ‡∏£‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏î‡∏ô‡∏¥‡πà‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        print("üìè ‡∏£‡∏≠‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ô‡∏¥‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å...")
        stable_start = time.time()
        stable_value = read_sensor(index)
        while True:
            current = read_sensor(index)
            if abs(current - stable_value) < 1:
                if time.time() - stable_start >= 2:
                    break
            else:
                stable_start = time.time()
                stable_value = current
            time.sleep(SENSOR_CHECK_INTERVAL)

        new_value = read_sensor(index)
        slot_status[index]["capacity_mm"] = new_value
        slot_status[index]["door_closed"] = True
        slot_status[index]["available"] = new_value > ZERO_THRESHOLD
        publish_status_slot(index)

    except Exception as e:
        print(f"[ERR] handle_door_unlock({index}): {e}")
    finally:
        reading_active = False


# alias ‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
run_state_machine = Storage_compartment


# ==== MQTT LISTENER (‡πÄ‡∏ö‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß: ‡πÇ‡∏¢‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ====
def on_message(client, userdata, msg):
    try:
        topic = msg.topic
        payload = msg.payload.decode("utf-8") if msg.payload else "{}"
        data = {}
        try:
            data = json.loads(payload) if payload else {}
        except Exception:
            pass

        # topic format: smartlocker/{NODE}/slot/{N}/command/{kind}
        parts = topic.split("/")
        if len(parts) >= 6 and parts[0] == "smartlocker":
            node = parts[1]
            slot = int(parts[3])  # 1-based
            kind = parts[5]       # "open" | "unlock"
            role = data.get("role", "student")

            if not is_valid_role(role):
                print(f"‚ùå Invalid role: {role}")
                return

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° kind
            if kind == "open" and not can_insert(role):
                print(f"üö´ role '{role}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå {kind}")
                return
            if kind == "unlock" and not can_unlock(role):
                print(f"üö´ role '{role}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå {kind}")
                return

            # ‡πÇ‡∏¢‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ queue (‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏≤‡∏ß‡πÉ‡∏ô callback)
            cmd_q.put((kind, node, slot, role))
            print(f"[ENQUEUE] {kind} node={node} slot={slot} role={role}")
        else:
            print(f"[MQTT] skip topic: {topic}")
    except Exception as e:
        print(f"[on_message ERR] {e}")


# ==== MQTT CONNECTOR (Subscriber) ====
def _build_mqtt_client():
    import ssl
    import paho.mqtt.client as mqtt

    host = os.getenv("MQTT_HOST", "localhost")
    port = int(os.getenv("MQTT_PORT", "1883"))
    username = os.getenv("MQTT_USERNAME")
    password = os.getenv("MQTT_PASSWORD")
    use_tls = bool(int(os.getenv("MQTT_TLS", "0")))
    use_ws = bool(int(os.getenv("MQTT_WS", "0")))
    client_id = os.getenv("MQTT_CLIENT_ID")
    ca_path = os.getenv("MQTT_CA")  # optional

    client = mqtt.Client(
        callback_api_version=mqtt.CallbackAPIVersion.VERSION2,
        client_id=client_id,
        transport="websockets" if use_ws else "tcp",
        protocol=mqtt.MQTTv311,
    )

    if username:
        client.username_pw_set(username=username, password=password)

    if use_ws:
        # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HiveMQ Cloud (WebSocket path)
        try:
            client.ws_set_options(path="/mqtt")
        except Exception:
            pass

    if use_tls:
        if ca_path:
            client.tls_set(ca_certs=ca_path, tls_version=ssl.PROTOCOL_TLS_CLIENT)
        else:
            import ssl as _ssl
            client.tls_set_context(_ssl.create_default_context())
        client.tls_insecure_set(False)
        if port == 1883:
            port = 8883  # default TLS port if‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏

    client.on_message = on_message

    # resubscribe ‡πÄ‡∏°‡∏∑‡πà‡∏≠ reconnect
    def _on_connect(_c, _u, _f, rc, props=None):
        topics = list(get_command_subscriptions())
        for t in topics:
            _c.subscribe(t)
            print(f"[MQTT] Subscribed: {t}")
    client.on_connect = _on_connect

    # ‡∏ï‡∏±‡πâ‡∏á backoff reconnect
    try:
        client.reconnect_delay_set(min_delay=1, max_delay=16)
    except Exception:
        pass

    client.connect(host, port, keepalive=60)
    return client


# ==== WORKER THREAD ====
def command_worker():
    while True:
        try:
            kind, node, slot, role = cmd_q.get()
            global reading_active, selected_sensor_index, user_role

            # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö; ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á ‡πÉ‡∏ä‡πâ busy[slot-1] ‡πÅ‡∏ó‡∏ô
            if reading_active:
                print("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô")
                continue

            selected_sensor_index = slot - 1
            user_role = role
            reading_active = True

            try:
                if kind == "open":
                    Storage_compartment(slot - 1)  # index ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° 0
                elif kind == "unlock":
                    handle_door_unlock(slot - 1)
                else:
                    print(f"‚ùì ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {kind}")
            finally:
                # NOTE: ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡πá‡∏°‡∏µ finally ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                reading_active = False

        except Exception as e:
            print(f"[ERR] worker: {e}")
        finally:
            try:
                cmd_q.task_done()
            except Exception:
                pass




if __name__ == "__main__":
    main()
